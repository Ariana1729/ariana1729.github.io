

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10101 = Integer(10101); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)
from pwn import *

r = remote("07.cr.yp.toc.tf",_sage_const_10101 )

def inv_l(n):
    f = factor(n)
    rf = f
    invn = _sage_const_1 
    while rf != factor(_sage_const_1 ):
        pls = [prod(i) for i in subsets([factor(i)**j for i,j in rf])]
        pls[_sage_const_0 ] = factor(_sage_const_1 )
        pls.sort(key=lambda x:-x.prod())
        for pf in pls:
            div = [prod(factor(p)**e for p,e in i) for i in cartesian_product([[(i[_sage_const_0 ],j) for j in range(i[_sage_const_1 ]+_sage_const_1 )] for i in f/pf])]
            div[_sage_const_0 ] = factor(_sage_const_1 )
            div.sort(key=lambda x:x.prod())
            for i in div:
                if is_prime(i*pf+_sage_const_1 ):
                    invn *= i*pf+_sage_const_1 
                    rf = rf/pf
                    break
            else:
                continue
            break
    return invn

r.recvuntil(b"carmichael_lambda(n) = ")
while True:
    try:
        print(r.recvuntil(b"carmichael_lambda(n) = "))
    except:
        r.interactive()
    n = int(r.recvline()[:-_sage_const_3 ])
    print(n)
    r.sendline(str(inv_l(n)))
    print(inv_l(n))

